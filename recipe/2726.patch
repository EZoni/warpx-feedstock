From c4753066dbd819295ebf38befccc8340d57b6fec Mon Sep 17 00:00:00 2001
From: Axel Huebl <axel.huebl@plasma.ninja>
Date: Mon, 17 Jan 2022 20:48:30 -0800
Subject: [PATCH] Python: Fix UB in Inputs Passing

Trying to fix the macOS PyPy 3.7 error seen in https://github.com/conda-forge/warpx-feedstock/issues/37
Testing in https://github.com/conda-forge/warpx-feedstock/pull/38

After googling for a while, the original implementation was likely based on https://code.activestate.com/lists/python-list/704158, which contains bugs.

1) Bug: `create_string_buffer`

Allocating new, null-terminated char arrays with `ctypes.create_string_buffer` does lead to scrambled arrays in pypy3.7.
As far as I can see, this [should have also worked](https://docs.python.org/3/library/ctypes.html), but maybe there is a bug in the upstream implementation or the original code created some kind of use-after-free on a temporary while the new implementation just shares the existing byte address.

This leads to errors such as the ones here:
https://github.com/conda-forge/warpx-feedstock/pull/38#issuecomment-1010160519

The call `argvC[i] = ctypes.c_char_p(enc_arg)` is equivalent in creating a `NULL`-terminated char array.

2) Bug: Last Argv Argument

The last argument in the array of char arrays `argv` in ANSII C needs to be a plain `NULL` ptr.
Before this PR, this has been allocated but never initialized, leading to undefined behavior (read as: crashes).

Reference: https://stackoverflow.com/a/39096006/2719194

3) Cleanup: there is a pre-defined `ctypes.c_char_p` we can use for pointer of char.
---
 Python/pywarpx/_libwarpx.py | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/Python/pywarpx/_libwarpx.py b/Python/pywarpx/_libwarpx.py
index 9de8227397..105bfc37f9 100755
--- a/Python/pywarpx/_libwarpx.py
+++ b/Python/pywarpx/_libwarpx.py
@@ -38,7 +38,7 @@
     _path_libc = _find_library('c')
 _libc = ctypes.CDLL(_path_libc)
 _LP_c_int = ctypes.POINTER(ctypes.c_int)
-_LP_c_char = ctypes.POINTER(ctypes.c_char)
+_LP_c_char = ctypes.c_char_p
 
 
 class LibWarpX():
@@ -397,10 +397,15 @@ def get_nattr_species(self, species_name):
     def amrex_init(self, argv, mpi_comm=None):
         # --- Construct the ctype list of strings to pass in
         argc = len(argv)
+
+        # note: +1 since there is an extra char-string array element,
+        #       that ANSII C requires to be a simple NULL entry
+        #       https://stackoverflow.com/a/39096006/2719194
         argvC = (_LP_c_char * (argc+1))()
         for i, arg in enumerate(argv):
             enc_arg = arg.encode('utf-8')
-            argvC[i] = ctypes.create_string_buffer(enc_arg)
+            argvC[i] = _LP_c_char(enc_arg)
+        argvC[argc] = _LP_c_char(b"\0")  # +1 element must be NULL
 
         if mpi_comm is None or MPI is None:
             self.libwarpx_so.amrex_init(argc, argvC)
