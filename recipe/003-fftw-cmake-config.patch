From 6454ce3daa021502f2c2f68f106cdf179144a960 Mon Sep 17 00:00:00 2001
From: Axel Huebl <axel.huebl@plasma.ninja>
Date: Sat, 6 Mar 2021 13:27:54 -0800
Subject: [PATCH] FFTW: CMakeConfig Support

Modern FFTW versions support CMake as an install method, which
provides the legacy goodies (`.pc`) files and proper
`FFTW3(f)Config.cmake` files for dependency propagation.

Conda-forge uses the CMake-based method to deploy. Checking this,
I realized the `.pc` files add unconditionally `libm` to the linker,
which is wrong on Windows and fails the builds.

Thus, forward looking we would search first for CMake based installs
of FFTW and in case this search is not successful, we continue to
search for the old Autotools logic and `.pc` files, which are still
routinely generated by some package managers.
But, due to an issue in FFTW3 3.3.9 on Linux/macOS with Autotools
installs, we make `Config.cmake` file based search still opt-in for
now.
---
 CMakeLists.txt               | 31 ++------------
 cmake/WarpXFunctions.cmake   | 14 +++++--
 cmake/dependencies/FFT.cmake | 80 ++++++++++++++++++++++++++++++++++++
 3 files changed, 95 insertions(+), 30 deletions(-)
 create mode 100644 cmake/dependencies/FFT.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5632dfc5e8..b8cf08cf44 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -112,23 +112,12 @@ include(${WarpX_SOURCE_DIR}/cmake/dependencies/PICSAR.cmake)
 include(${WarpX_SOURCE_DIR}/cmake/dependencies/openPMD.cmake)
 
 # PSATD
+include(${WarpX_SOURCE_DIR}/cmake/dependencies/FFT.cmake)
 if(WarpX_PSATD)
-    # FFTW (non-GPU) and cuFFT/rocFFT (GPU)
-    if(WarpX_COMPUTE STREQUAL HIP)
-        find_package(rocfft REQUIRED)
-    elseif(NOT WarpX_COMPUTE STREQUAL CUDA)
-        find_package(PkgConfig REQUIRED QUIET)
-        if(WarpX_PRECISION STREQUAL "DOUBLE")
-            pkg_check_modules(fftw3 REQUIRED IMPORTED_TARGET fftw3)
-        else()
-            pkg_check_modules(fftw3f REQUIRED IMPORTED_TARGET fftw3f)
-        endif()
-    endif()
     # BLASPP and LAPACKPP
     if(WarpX_DIMS STREQUAL RZ)
-        # FIXME send a couple of upstream PRs to those repos...
-        find_package(blaspp REQUIRED)
-        find_package(lapackpp REQUIRED)
+        find_package(blaspp CONFIG REQUIRED)
+        find_package(lapackpp CONFIG REQUIRED)
         find_package(OpenMP REQUIRED)  # pulled by the two above
     endif()
 endif()
@@ -219,20 +208,8 @@ endif()
 target_link_libraries(WarpX PUBLIC WarpX::thirdparty::AMReX)
 
 if(WarpX_PSATD)
-    if(WarpX_COMPUTE STREQUAL CUDA)
-        # CUDA_ADD_CUFFT_TO_TARGET(WarpX)
-        target_link_libraries(WarpX PUBLIC cufft)
-    elseif(WarpX_COMPUTE STREQUAL HIP)
-        target_link_libraries(WarpX PUBLIC roc::rocfft)
-    else()
-        if(WarpX_PRECISION STREQUAL "DOUBLE")
-            target_link_libraries(WarpX PUBLIC PkgConfig::fftw3)
-        else()
-            target_link_libraries(WarpX PUBLIC PkgConfig::fftw3f)
-        endif()
-    endif()
+    target_link_libraries(WarpX PUBLIC WarpX::thirdparty::FFT)
     if(WarpX_DIMS STREQUAL RZ)
-        # FIXME send a couple of upstream PRs to those repos...
         target_link_libraries(WarpX PUBLIC blaspp)
         target_link_libraries(WarpX PUBLIC lapackpp)
     endif()
diff --git a/cmake/WarpXFunctions.cmake b/cmake/WarpXFunctions.cmake
index bfb5f498e1..19522b9dfc 100644
--- a/cmake/WarpXFunctions.cmake
+++ b/cmake/WarpXFunctions.cmake
@@ -133,9 +133,17 @@ endfunction()
 function(make_third_party_includes_system imported_target propagated_name)
     add_library(WarpX::thirdparty::${propagated_name} INTERFACE IMPORTED)
     target_link_libraries(WarpX::thirdparty::${propagated_name} INTERFACE ${imported_target})
-    get_target_property(ALL_INCLUDES ${imported_target} INCLUDE_DIRECTORIES)
-    set_target_properties(WarpX::thirdparty::${propagated_name} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "")
-    target_include_directories(WarpX::thirdparty::${propagated_name} SYSTEM INTERFACE ${ALL_INCLUDES})
+    
+    if(TARGET ${imported_target})
+        get_target_property(imported_target_type ${imported_target} TYPE)
+        if(NOT imported_target_type STREQUAL INTERFACE_LIBRARY)
+            get_target_property(ALL_INCLUDES ${imported_target} INCLUDE_DIRECTORIES)
+            if(ALL_INCLUDES)
+                set_target_properties(WarpX::thirdparty::${propagated_name} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "")
+                target_include_directories(WarpX::thirdparty::${propagated_name} SYSTEM INTERFACE ${ALL_INCLUDES})
+            endif()
+        endif()
+    endif()
 endfunction()
 
 
diff --git a/cmake/dependencies/FFT.cmake b/cmake/dependencies/FFT.cmake
new file mode 100644
index 0000000000..37b922c91b
--- /dev/null
+++ b/cmake/dependencies/FFT.cmake
@@ -0,0 +1,80 @@
+if(WarpX_PSATD)
+    # cuFFT  (CUDA)
+    #   TODO: check if `find_package` search works
+
+    # rocFFT (HIP)
+    if(WarpX_COMPUTE STREQUAL HIP)
+        find_package(rocfft REQUIRED)
+
+    # FFTW   (NOACC, OMP, SYCL)
+    elseif(NOT WarpX_COMPUTE STREQUAL CUDA)
+        # On Windows, try searching for FFTW3(f)Config.cmake files first
+        #   Installed .pc files wrongly and unconditionally add -lm
+        #   https://github.com/FFTW/fftw3/issues/236
+
+        # On Linux & macOS, note Autotools install bug:
+        #   https://github.com/FFTW/fftw3/issues/235
+        # Thus, rely on .pc files
+
+        set(WarpX_FFTW_SEARCH_VALUES PKGCONFIG CMAKE)
+        set(WarpX_FFTW_SEARCH_DEFAULT PKGCONFIG)
+        if(WIN32)
+            set(WarpX_FFTW_SEARCH_DEFAULT CMAKE)
+        endif()
+        set(WarpX_FFTW_SEARCH ${WarpX_FFTW_SEARCH_DEFAULT}
+            CACHE STRING "FFTW search method (PKGCONFIG/CMAKE)")
+        set_property(CACHE WarpX_FFTW_SEARCH PROPERTY STRINGS ${WarpX_FFTW_SEARCH_VALUES})
+        if(NOT WarpX_FFTW_SEARCH IN_LIST WarpX_FFTW_SEARCH_VALUES)
+            message(FATAL_ERROR "WarpX_FFTW_SEARCH (${WarpX_FFTW_SEARCH}) must be one of ${WarpX_FFTW_SEARCH_VALUES}")
+        endif()
+        mark_as_advanced(WarpX_FFTW_SEARCH)
+
+        if(WarpX_FFTW_SEARCH STREQUAL CMAKE)
+            if(WarpX_PRECISION STREQUAL "DOUBLE")
+                find_package(FFTW3 CONFIG REQUIRED)
+            else()
+                find_package(FFTW3f CONFIG REQUIRED)
+            endif()
+        else()
+            if(WarpX_PRECISION STREQUAL "DOUBLE")
+                find_package(PkgConfig REQUIRED QUIET)
+                pkg_check_modules(fftw3 REQUIRED IMPORTED_TARGET fftw3)
+            else()
+                find_package(PkgConfig REQUIRED QUIET)
+                pkg_check_modules(fftw3f REQUIRED IMPORTED_TARGET fftw3f)
+            endif()
+        endif()
+    endif()
+
+    # create an IMPORTED target: WarpX::thirdparty::FFT
+    if(WarpX_COMPUTE STREQUAL CUDA)
+        # CUDA_ADD_CUFFT_TO_TARGET(WarpX::thirdparty::FFT)
+        make_third_party_includes_system(cufft FFT)
+    elseif(WarpX_COMPUTE STREQUAL HIP)
+        make_third_party_includes_system(roc::rocfft FFT)
+    else()
+        if(WarpX_PRECISION STREQUAL "DOUBLE")
+            if(FFTW3_FOUND)
+                # subtargets: fftw3, fftw3_threads, fftw3_omp
+                if(WarpX_COMPUTE STREQUAL OMP AND TARGET FFTW3::fftw3_omp)
+                    make_third_party_includes_system(FFTW3::fftw3_omp FFT)
+                else()
+                    make_third_party_includes_system(FFTW3::fftw3 FFT)
+                endif()
+            else()
+                make_third_party_includes_system(PkgConfig::fftw3 FFT)
+            endif()
+        else()
+            if(FFTW3f_FOUND)
+                # subtargets: fftw3f, fftw3f_threads, fftw3f_omp
+                if(WarpX_COMPUTE STREQUAL OMP AND TARGET FFTW3::fftw3f_omp)
+                    make_third_party_includes_system(FFTW3::fftw3f_omp FFT)
+                else()
+                    make_third_party_includes_system(FFTW3::fftw3f FFT)
+                endif()
+            else()
+                make_third_party_includes_system(PkgConfig::fftw3f FFT)
+            endif()
+        endif()
+    endif()
+endif()
